1、元注解
    java的注解处理器类主要是AnnotatedElement接口的实现类实现，为位于java.lang.reflect包下；
    元注解的作用就是注解其他注解，一般我们使用自定义注解时，就需要用元注解来标注我们自己的注解，一共有以下四个元注解；
    @Target：
        说明了Annotation被修饰的范围，可被用于 packages、types（类、接口、枚举、Annotation类型）、
        类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。
        在Annotation类型的声明中使用了target可更加明晰其修饰的目标；
        1.ElementType.CONSTRUCTOR:      用于描述构造器
        2.ElementType.FIELD:            用于描述域（类的成员变量）
        3.ElementType.LOCAL_VARIABLE:   用于描述局部变量（方法内部变量）
        4.ElementType.METHOD:           用于描述方法
        5.ElementType.PACKAGE:          用于描述包
        6.ElementType.PARAMETER:        用于描述参数
        7.ElementType.TYPE:             用于描述类、接口(包括注解类型) 或enum声明
    @Retention：
        定义了该Annotation被保留的时间长短，有些只在源码中保留，有时需要编译成的class中保留，有些需要程序运行时候保留。
        即描述注解的生命周期
        1.RetentionPoicy.SOURCE:    在源文件中有效（即源文件保留）
        2.RetentionPoicy.CLASS:     在class文件中有效（即class保留）
        3.RetentionPoicy.RUNTIME:   在运行时有效（即运行时保留）
    @Documented：
        它是一个标记注解，即没有成员的注解，用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，
        因此可以被例如javadoc此类的工具文档化
    @Inherited：
        它也是一个标记注解，它的作用是，被它标注的类型是可被继承的，比如一个class被@Inherited标记，
        那么一个子类继承该class后，则这个annotation将被用于该class的子类。
        一个类型被@Inherited修饰后，类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。
2、自定义注解
    public @interface 注解名 {定义体}
    使用@interface定义一个注解，自动继承了java.lang.annotation.Annotation接口，其中的每一个方法实际上是声明了一个配置参数。
    方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。
    可以通过default来声明参数的默认值。
    注解参数的可支持数据类型：
        1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)
        2.String类型
        3.Class类型
        4.enum类型
        5.Annotation类型
        6.以上所有类型的数组
    注意点：
        ① 只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　
        ② 参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型，
          以及 String,Enum,Class,annotations等数据类型，以及这一些类型的数组。
        ③ 注解元素必须有确定的值，要么指定时给默认值，要么使用时给值。
          不过有时候我们需要确定表达一个元素不存在值，所以使用空字符串或者负数表示某个元素不存在，
          在定义注解时，这已经成为一个约定用法。
        ④ 父类的类上和方法上有自定义注解，并且被@Inherited标记，那么子类只有继承的情况下才会继承父类注解。
          重写，重载，实现父类方法这些都不会继承父类注解。

参考来源：
    深入理解Java自定义注解(一):入门     https://my.oschina.net/itgaowei/blog/1600525
    深入理解Java自定义注解(二)-使用自定义注解    https://my.oschina.net/itgaowei/blog/1602277