1、定义
    当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。
    比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。

    观察者一般可以看做是第三者，比如在学校上自习的时候，大家肯定都有过交头接耳、各种玩耍的经历，
    这时总会有一个“放风”的小伙伴，当老师即将出现时及时“通知”大家老师来了。

    再比如，拍卖会的时候，大家相互叫价，拍卖师会观察最高标价，然后通知给其它竞价者竞价，这就是一个观察者模式。

　　对于观察者模式而言，肯定有观察者和被观察者之分。
    比如在一个目录下建立一个文件，这时系统会通知目录管理器增加目录，并通知磁盘减少空间，在这里，文件就是观察者，目录管理器和磁盘就是被观察者。

　　观察者模式（Observer），又叫发布-订阅模式（Publish/Subscribe），
    定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。

    见观察者模式UML.png

2、 实现
    Subject类是主题，它把所有对观察者对象的引用文件存在了一个聚集里，每个主题都可以有任何数量的观察者。
    抽象主题提供了一个接口，可以增加和删除观察者对象；
    Observer类是抽象观察者，为所有的具体观察者定义一个接口，在得到主题的通知时更新自己；
    ConcreteSubject类是具体主题，将有关状态存入具体观察者对象，在具体主题内部状态改变时，给所有登记过的观察者发出通知；
    ConcreteObserver是具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协同。


参考：
    https://www.cnblogs.com/adamjwh/p/10913660.html
    https://www.jianshu.com/p/d55ee6e83d66