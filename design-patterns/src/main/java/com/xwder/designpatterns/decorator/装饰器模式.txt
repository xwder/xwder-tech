一、什么是装饰器模式？
    装饰器模式允许你向一个现有的对象添加新的功能，同时又不改变其结构，它是作为现有的类的一个包装。
    这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。
    他的目的主要是动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。

二、关键代码：
    1、Component 类充当抽象角色，不应具体实现。
    2、修饰类（Decorator）引用和继承 Component 类
    3、具体扩展类（ConcreteComponent）继承 Component 类，重写父类方法。

三、总结
    优点：
        装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
    缺点：
        多层装饰比较复杂。
    使用场景：
        1、扩展一个类的功能。
        2、动态增加功能，动态撤销。
    注意事项：
        动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性。可代替继承。

四、代理模式和装饰器模式的区别
    让别人帮助你做你并不关心的事情，叫代理模式；
    为让自己的能力增强，使得增强后的自己能够使用更多的方法，拓展在自己基础之上的功能的，叫装饰器模式；

    对装饰器模式来说，装饰者（decorator）和被装饰者（decoratee）都实现同一个接口。
    对代理模式来说，代理类（proxy class）和真实处理的类（real class）都实现同一个接口。
    他们之间的边界确实比较模糊，两者都是对类的方法进行扩展，具体区别如下：

    1、装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。增强后你还是你，只不过能力更强了而已；代理模式强调要让别人帮你去做一些本身与你业务没有太多关系的职责（记录日志、设置缓存）。代理模式是为了实现对象的控制，因为被代理的对象往往难以直接获得或者是其内部不想暴露出来。

    2、装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代方案；代理模式则是给一个对象提供一个代理对象，并由代理对象来控制对原有对象的引用；

    3、装饰模式是为装饰的对象增强功能；而代理模式对代理的对象施加控制，但不对对象本身的功能进行增强；