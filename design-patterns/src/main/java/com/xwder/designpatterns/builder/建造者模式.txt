前言
    建造者模式又被称呼为生成器模式，这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
    使用多个简单的对象一步一步构建成一个复杂的对象，有点像造房子一样一步步从地基做起到万丈高楼。
一、简介
    1、定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
    2、主要作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。
    3、如何使用：用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）
    4、解决的问题：
    （1）、方便用户创建复杂的对象（不需要知道实现过程）
    （2）、代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
    5、注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序，一般用来创建更为复杂的对象

二、实现方式
研究了好久发现关于建造者模式的实现例子有好多，有造人、造车、造房子、造世界的...等好多。但归类后有两种实现方式。

（1）通过Client、Director、Builder和Product形成的建造者模式

（2）通过静态内部类方式实现零件无序装配话构造

 三、总结

    1、  易于拓展。想要建唱歌机器人只要单独将这个类像跳舞人那样建好，交给Director就可以了。无需修改原有代码。符合“开闭原则”。

    2、  代码解耦，模块化，方便维护。产品本身与创建过程解耦，可以使用相同的创建过程得到不同的产品。

    3、  短板有：使用范围有限。建造者模式创造出来的产品，其组成部分基本相同。如果产品之间的差异较大，则不适用这个模式。

四、开源框架Mybatis中建造者模式的应用

    1、Mybatis中用到的建造者模式：

    SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder等

    2、举个我读Mybatis源码的例子：

    XMLConfigBuilder读取配置文件构建出Configuration对象，然后SqlSessionFactoryBuilder使用Configuration对象作为参数，构建出SqlSessionFactory对象。

    3、分析原因

    这么做的原因是Mybatis的初始化工作较复杂，不是一个构造函数就能包括的。
    所以采用了分层构建方法。例如Mybatis中极其重要的Configuration对象，它庞大且复杂，初始化比较麻烦，所以使用专门的建造者XMLConfigBuilder进行构建。

来源：https://www.jianshu.com/p/47329a94f5dc